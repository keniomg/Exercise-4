using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace functionTask4
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int playerPositionX = 1;
            int playerPositionY = 1;
            int score = 0;
            Console.CursorVisible = false;

            char[,] map =
            {
                { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
                { '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', 'X', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', '#', 'X', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', 'X', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' }
            };

            while (CheckIsContinue(score))
            {
                WriteScore(score);
                DrawMap(map);
                DrawPlayer(playerPositionX, playerPositionY);
                int[] direction = GetDirection();
                InteractNextPosElement(ref playerPositionX, ref playerPositionY, direction, map, ref score);
            }
        }
        
        static void DrawMap(char[,] map)
        {
            Console.SetCursorPosition(0, 0);
            for (int y = 0; y < map.GetLength(0); y++)
            {
                for (int x = 0; x < map.GetLength(1); x++)
                {
                    Console.Write(map[y, x]);
                }

                Console.WriteLine();
            }
        }

        static void DrawPlayer(int x, int y)
        {
            Console.SetCursorPosition(x, y);
            Console.Write('@');
        }

        static int[] GetDirection()
        {
            ConsoleKeyInfo pressedKey = Console.ReadKey();
            int[] direction = { 0, 0 };
            const ConsoleKey GoUpCommand = ConsoleKey.UpArrow;
            const ConsoleKey GoDownCommand = ConsoleKey.DownArrow;
            const ConsoleKey GoLeftCommand = ConsoleKey.LeftArrow;
            const ConsoleKey GoRightCommand = ConsoleKey.RightArrow;

            switch (pressedKey.Key)
            {
                case GoUpCommand:
                    direction[1] -= 1;
                    break;
                case GoDownCommand:
                    direction[1] += 1;
                    break;
                case GoLeftCommand:
                    direction[0] -= 1;
                    break;
                case GoRightCommand:
                    direction[0] += 1;
                    break;
            }

            return direction;
        }

        static void InteractNextPosElement(ref int x, ref int y, int[] direction, char[,] map, ref int score)
        {
            int nextX = x + direction[0];
            int nextY = y + direction[1];
            int treasureScoreReward = 5;

            switch (map[nextY, nextX])
            {
                case '#':
                    break;
                
                case ' ':
                    x = nextX;
                    y = nextY;
                    break;

                case 'X':
                    score += treasureScoreReward;
                    x = nextX;
                    y = nextY;
                    map[y, x] = 'O';
                    break;
            }
        }

        static void WriteScore(int score)
        {
            Console.SetCursorPosition(21, 0);
            Console.WriteLine("Очки за сокровища: " + score);
        }

        static bool CheckIsContinue(int score)
        {
            if (score >= 15)
            {
                Console.Clear();
                Console.SetCursorPosition(4, 7);
                Console.WriteLine("Вы собрали все сокровища! Игра окончена!");
                Console.SetCursorPosition(4, 10);
                Console.CursorVisible = true;
                return false;
            }
            else
            {
                return true;
            }
        }
    }
}
