using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Net.Mime.MediaTypeNames;

namespace functionTask4
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int playerPositionX = 1;
            int playerPositionY = 1;
            int score = 0;
            Console.CursorVisible = false;

            char[,] map =
            {
                { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' },
                { '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', 'X', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', '#', '#', '#', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', '#', 'X', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', '#', '#', ' ', '#', ' ', ' ', ' ', '#', ' ', ' ', '#', 'X', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', '#', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', ' ', '#', ' ', ' ', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#' },
                { '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#' }
            };

            while (IsContinue(score))
            {
                WriteScore(score);
                DrawMap(map);
                DrawPlayer(playerPositionX, playerPositionY);
                int[] direction = GetDirection();
                MovePlayer(ref playerPositionX, ref playerPositionY, direction, map, ref score);
            }
        }
        
        static void DrawMap(char[,] map)
        {
            Console.SetCursorPosition(0, 0);

            for (int positionY = 0; positionY < map.GetLength(0); positionY++)
            {
                for (int positionX = 0; positionX < map.GetLength(1); positionX++)
                {
                    Console.Write(map[positionY, positionX]);
                }

                Console.WriteLine();
            }
        }

        static void DrawPlayer(int positionX, int positionY)
        {
            Console.SetCursorPosition(positionX, positionY);
            Console.Write('@');
        }

        static int[] GetDirection()
        {
            const ConsoleKey GoUpCommand = ConsoleKey.UpArrow;
            const ConsoleKey GoDownCommand = ConsoleKey.DownArrow;
            const ConsoleKey GoLeftCommand = ConsoleKey.LeftArrow;
            const ConsoleKey GoRightCommand = ConsoleKey.RightArrow;

            ConsoleKeyInfo pressedKey = Console.ReadKey();
            int[] direction = { 0, 0 };

            switch (pressedKey.Key)
            {
                case GoUpCommand:
                    direction[1]--;
                    break;

                case GoDownCommand:
                    direction[1]++;
                    break;

                case GoLeftCommand:
                    direction[0]--;
                    break;

                case GoRightCommand:
                    direction[0]++;
                    break;
            }

            return direction;
        }

        static void MovePlayer(ref int positionX, ref int positionY, int[] direction, char[,] map, ref int score)
        {
            const char EmptyCell = ' ';
            const char UnknownTreasureCell = 'X';
            const char KnownTreasureCell = 'O';

            int nextPositionX = positionX + direction[0];
            int nextPositionY = positionY + direction[1];
            int treasureScoreReward = 5;

            switch (map[nextPositionY, nextPositionX])
            {
                case KnownTreasureCell:
                case EmptyCell:
                    MoveNextCell(ref positionX, ref positionY, nextPositionX, nextPositionY);
                    break;

                case UnknownTreasureCell:
                    InteractUnknownTreasure(ref positionX, ref positionY, nextPositionX, nextPositionY, ref score, ref treasureScoreReward, ref map, KnownTreasureCell);
                    break;
            }
        }

        static void InteractUnknownTreasure(ref int positionX, ref int positionY, int nextPositionX, int nextPositionY, ref int score, ref int treasureScoreReward, ref char[,] map, char knownTreasureCell)
        {
            MoveNextCell(ref positionX, ref positionY, nextPositionX, nextPositionY);
            score += treasureScoreReward;
            map[positionY, positionX] = knownTreasureCell;
        }

        static void MoveNextCell(ref int positionX, ref int positionY, int nextPositionX, int nextPositionY)
        {
            positionX = nextPositionX;
            positionY = nextPositionY;
        }

        static void WriteScore(int score)
        {
            Console.SetCursorPosition(21, 0);
            Console.WriteLine("Очки за сокровища: " + score);
        }

        static bool IsContinue(int score)
        {
            int scoreToWin = 15;

            if (score >= scoreToWin)
            {
                Console.Clear();
                Console.SetCursorPosition(4, 7);
                Console.WriteLine("Вы собрали все сокровища! Игра окончена!");
                Console.SetCursorPosition(4, 10);
                Console.CursorVisible = true;
                return false;
            }
            else
            {
                return true;
            }
        }
    }
}
